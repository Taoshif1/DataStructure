#include <stdio.h>
#include <stdlib.h>

struct Node {
int data;
struct Node* next;
};

void insertAtEnd(struct Node** head, int data) {
struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
if (!new_node) {
printf("Memory allocation failed\n");
return;
}
new_node->data = data;
new_node->next = NULL;
if (*head == NULL) {
*head = new_node;
return;
}
struct Node* last = *head;
while (last->next) {
last = last->next;
}
last->next = new_node;
}
void insertAfter(struct Node** head, int data, int position) {
if (position < 0) {
printf("Invalid position\n");
return;
}
struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
if (!new_node) {
printf("Memory allocation failed\n");
return;
}
new_node->data = data;
struct Node* temp = *head;
for (int i = 0; temp != NULL && i < position; i++) {
temp = temp->next;
}
if (temp == NULL) {
printf("Position out of bounds\n");
return;
}
new_node->next = temp->next;
temp->next = new_node;
}
void printList(struct Node* head) {
while (head) {
printf("%d -> ", head->data);
head = head->next;
}
printf("NULL\n");
}
int main() {
struct Node* head = NULL;
int elements[] = {23, 48, 57, 4, 12};
int size = sizeof(elements) / sizeof(elements[0]);
for (int i = 0; i < size; i++) {
insertAtEnd(&head, elements[i]);
}
insertAfter(&head, 102, 1);
printf("Singly Linked List after insertion: ");
printList(head);
return 0;
}
